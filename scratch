
import streamlit as st
import pandas as  pd
import os
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelBinarizer, LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
import sys
from pandas.errors import ParserError
import time
import altair as alt
import matplotlib.cm as cm
# Keras specific
import keras
from keras.models import Sequential
from keras.layers import Dense

data = pd.read_csv(os.path.join("../data/","train.csv"))
# data = data[['age', 'height_cm', 'weight_kg', 'overall', 'potential','shooting', 'player_positions', 'nationality']]
data = data[['Survived', 'Pclass', 'Age','Sex', 'Embarked']]

cat_imp = SimpleImputer(strategy="most_frequent")
data.loc[:,data.dtypes == 'object'] = cat_imp.fit_transform(data.loc[:,data.dtypes == 'object'])
data.loc[:,data.dtypes != 'object']
imp = SimpleImputer(missing_values = np.nan, strategy="mean")
data.loc[:,data.dtypes != 'object'] = imp.fit_transform(data.loc[:,data.dtypes != 'object'])

cats = data.dtypes == 'object'
le = LabelEncoder() 

for x in data.columns[cats]:
    sum(pd.isna(data[x]))
    data.loc[:,x] = le.fit_transform(data[x])

onehotencoder = OneHotEncoder() 
data.loc[:, ~cats].join(pd.DataFrame(data=onehotencoder.fit_transform(data.loc[:,cats]).toarray(), columns= onehotencoder.get_feature_names()))



X = data.loc[:, data.columns != 'Survived'].copy()

y = data['Survived']



scaler = MinMaxScaler(feature_range=(0,1))
scaler.fit(X.loc[:, X.dtypes!='object'])
X.loc[:, X.dtypes!='object'] = scaler.transform(X.loc[:, X.dtypes!='object'])
X.columns = data.loc[:, data.columns != 'Survived'].columns



X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)


model = Sequential()
model.add(Dense(500, input_dim = len(data.columns)- 1, activation='relu',))
model.add(Dense(50, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(2, activation='softmax'))

optimizer = keras.optimizers.SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=10, batch_size=20)

data['shooting'].mean() - 2 * data['shooting'].std()
np.isnan(data).sum()

pred= model.predict(X_test)
print(mean_squared_error(y_test,pred))

data[['short_name', 'potential']].sort_values(by= 'potential', ascending=False)